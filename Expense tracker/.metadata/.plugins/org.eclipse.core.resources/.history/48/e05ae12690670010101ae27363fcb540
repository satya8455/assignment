
package com.watsoo.wallet.serviceImpl;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.watsoo.wallet.dto.Response;
import com.watsoo.wallet.dto.WalletDto;
import com.watsoo.wallet.dto.WalletTypeDto;
import com.watsoo.wallet.entity.IncomeTransaction;
import com.watsoo.wallet.entity.User;
import com.watsoo.wallet.entity.Wallet;
import com.watsoo.wallet.entity.WalletType;
import com.watsoo.wallet.enums.Role;
import com.watsoo.wallet.repository.IncometransactionRepository;
import com.watsoo.wallet.repository.UserRepository;
import com.watsoo.wallet.repository.WalletRepository;
import com.watsoo.wallet.repository.WalletTypeRepository;
import com.watsoo.wallet.security.CustomizedUserDetailsService;
import com.watsoo.wallet.service.WalletService;

@Service
public class WalletServiceImpl implements WalletService {

	@Autowired
	private CustomizedUserDetailsService customizedUserDetailsService;

	@Autowired
	private WalletRepository walletRepository;

	@Autowired
	private WalletTypeRepository walletTypeRepository;
	
	@Autowired
	private IncometransactionRepository incometransactionRepository ;
	@Autowired
	private UserRepository userRepository;

	@Override
	public Response<?> createWallet(WalletDto walletDto) {
		try {
			Optional<User> userDetails = userRepository.findById(walletDto.getUserDto().getId());		
			if (userDetails.isEmpty()) {
			    return new Response<>(HttpStatus.BAD_REQUEST.value(), "No user present", null);
			}
			User user = userDetails.get();
			
			List<WalletType> walletTypes = walletTypeRepository.findAllAndfindByUserId(user.getId());
			
			List<Long> walletTypeIds = walletTypes.stream().map(e -> e.getId()).collect(Collectors.toList());
			if (!walletTypeIds.contains(walletDto.getWalletTypeDto().getId())) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Give proper wallet-type id", null);
			}
			Optional<WalletType> walletTypeOptional = walletTypes.stream()
					.filter(e -> e.getId().equals(walletDto.getWalletTypeDto().getId())).findFirst();

			Wallet wallet = new Wallet();
			wallet.setName(walletDto.getName());
			wallet.setBalance(walletDto.getBalance());
			wallet.setUser(userDetails.get());
			wallet.setWalletType(walletTypeOptional.get());
			walletRepository.save(wallet);
			
			//income source
			IncomeTransaction incomeTransaction = new IncomeTransaction();
			incomeTransaction.setAmount(walletDto.getBalance());
			incomeTransaction.setDate(new Date());
			incomeTransaction.setSource(walletTypeOptional.get().getName()); 
			incomeTransaction.setRemarks("Initial deposit while creating wallet");
			incomeTransaction.setWallet(wallet);
			incometransactionRepository.save(incomeTransaction);
			
			return new Response<>(HttpStatus.OK.value(), "wallet created & transaction updated", null);

		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
		}
	}

	
	@Override
	public Response<?> getAllWallet(Long userId) {
		try {
			Optional<User> userOptional = userRepository.findById(userId);		

			if (userOptional.isEmpty()) {
			    return new Response<>(HttpStatus.UNAUTHORIZED.value(), "User not found", null);
			}
			List<Wallet> wallets = walletRepository.findByUser_Id(userOptional.get().getId());
			List<WalletDto> walletDtos = wallets.stream()
			        .map(Wallet::convertToDto)
			        .collect(Collectors.toList());

			return new Response<>(HttpStatus.OK.value(), "Wallets fetched", walletDtos);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new Response<>(HttpStatus.BAD_REQUEST.value(), "something went wrong", null);

		}	 	
	}

	@Override
	public Response<?> createWalletType(WalletTypeDto walletTypeDto) {
		try {
			Optional<User> loggedUser = userRepository.findById(walletTypeDto.getUserDto().getId());		
			if (loggedUser.isEmpty()) {
			    return new Response<>(HttpStatus.BAD_REQUEST.value(), "No user present", null);
			}
			
			WalletType walletType = new WalletType();
			if (walletTypeDto.getName() == null || walletTypeDto.getName().isEmpty()) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Provide wallet-name", null);
			}
			Optional<WalletType> walletTypeOptional=walletTypeRepository.findByName(walletTypeDto.getName());
			if (walletTypeOptional.isPresent()) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "wallet-type already exists", null);
			}
			walletType.setName(walletTypeDto.getName());
			walletType.setUser(!loggedUser.get().getRole().equals(Role.ADMIN) ?  loggedUser.get() : null);

			walletTypeRepository.save(walletType);
			return new Response<>(HttpStatus.OK.value(), "wallet-type created", null);

		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
		}
	}

	@Override
	public Response<?> getAllWalletType(Long userId) {
		try {
			List<WalletType> walletTypes = walletTypeRepository.findAllAndfindByUserId(userId);
			List<WalletTypeDto> walllTypeDtos = walletTypes.stream()
						.map(WalletType::convertToDto)
						.collect(Collectors.toList());	
			return new Response<>(HttpStatus.OK.value(), "Found successfully", walllTypeDtos);
		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
		}
	}
	@Override
	public Response<?> getWalletById(Long id) {
		try {
			if (id == null) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Provide wallet Id", null);
			}			
			Optional<Wallet> existingWallet = walletRepository.findById(id);
			if(existingWallet.isPresent()) {
				WalletDto walletDto = existingWallet.get().convertToDto();
			        return new Response<>(HttpStatus.OK.value(), "Wallet found", walletDto);
			}
			return new Response<>(HttpStatus.BAD_REQUEST.value(),"wallet not found",null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new Response<>(HttpStatus.BAD_REQUEST.value(), "something went wrong", null);
		}

	}
	
	

	 @Override
	 public Response<?> deductFromWallet(WalletDto walletDto) {
	  try {
	   
	   Optional<Wallet> walletOptional = walletRepository.findByIdAndUser_Id(walletDto.getId(), walletDto.getUserDto().getId());
	   if (!walletOptional.isPresent()) {
	    return new Response<>(HttpStatus.BAD_REQUEST.value(), "Give valid wallet id and userId", null);
	   }
	   Wallet wallet = walletOptional.get();
	   if(wallet.getBalance() < walletDto.getBalance()) {
	    return new Response<>(HttpStatus.BAD_REQUEST.value(), "Wallet money is less than deduct money", null);
	   }
	   wallet.setBalance(wallet.getBalance()-walletDto.getBalance());
	   walletRepository.save(wallet);
	   return new Response<>(HttpStatus.OK.value(), "Deducted successfully", null);
	  } catch (Exception e) {
	   e.printStackTrace();
	   return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
	  }
	 }

}
