package com.watsoo.expense.serviceImpl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.watsoo.expense.dto.CategoryBudgetDto;
import com.watsoo.expense.dto.CategoryDto;
import com.watsoo.expense.dto.Response;
import com.watsoo.expense.entity.CategoryBudget;
import com.watsoo.expense.entity.ExpenseCategory;
import com.watsoo.expense.repository.CategoryBudgetRepository;
import com.watsoo.expense.repository.ExpenseCategoryRepository;
import com.watsoo.expense.service.ExpenseCategoryService;
import com.watsoo.expense.util.DateUtil;

@Service
public class ExpenseCategoryServiceImpl implements ExpenseCategoryService {

	@Autowired
	private ExpenseCategoryRepository expenseCategoryRepository;

	@Autowired
	private CategoryBudgetRepository budgetRepository;

	public Response<?> createExpenseCategory(CategoryDto categoryDto) {
		try {
			if (categoryDto == null || categoryDto.getName() == null || categoryDto.getUserId() == null) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Provide valid category name and user ID", null);
			}

			String categoryName = categoryDto.getName().trim().toLowerCase();
			List<ExpenseCategory> existingCategories = expenseCategoryRepository.findAllByUserId(categoryDto.getUserId());
			boolean alreadyExists = existingCategories.stream()
					.anyMatch(cat -> cat.getName() != null && cat.getName().trim().equalsIgnoreCase(categoryName));

			if (alreadyExists) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Expense category already exists", null);
			}
			ExpenseCategory expenseCategory = new ExpenseCategory();
			expenseCategory.setName(categoryDto.getName().trim());
			expenseCategory.setUserId(categoryDto.getUserId());

			expenseCategoryRepository.save(expenseCategory);

			return new Response<>(HttpStatus.OK.value(), "Expense category created successfully", null);

		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Something went wrong", null);
		}
	}

	@Override
	public Response<?> getAllExpenseCategory(Long userId) {
		try {
			List<ExpenseCategory> expenseCategories = expenseCategoryRepository.findAllByUserId(userId);
			List<CategoryDto> categoryDtos = expenseCategories.stream().map(ExpenseCategory::convertToDto)
					.collect(Collectors.toList());
			return new Response<>(HttpStatus.OK.value(), "Ok.", categoryDtos);

		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
		}
	}

	public Response<?> createMonthlyBudget(CategoryBudgetDto dto) {
		try {
			if (dto.getAmount() == null ) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Send monthly budget", null);
			}
			if (dto.getCategoryDto().getId() == null) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Expense category ID is required", null);
			}
			if (dto.getUserId() == null) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "User ID is required", null);
			}

			String month = (dto.getMonth() == null || dto.getMonth().isBlank()) ? DateUtil.formatDateToYearMonth(new Date())
					: dto.getMonth();

			Optional<ExpenseCategory> categoryOpt = expenseCategoryRepository.findById(dto.getCategoryDto().getId());
			if (categoryOpt.isEmpty()) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Invalid category ID", null);
			}
			ExpenseCategory category = categoryOpt.get();
			if (category.getUserId() != null && !category.getUserId().equals(dto.getUserId())) {
			    return new Response<>(HttpStatus.BAD_REQUEST.value(), "Unauthorized access to category", null);
			}
			if (dto.getId() == null) {
				
				Optional<CategoryBudget> existing = budgetRepository.findByMonthAndCategoryAndUser(month,
						dto.getCategoryDto().getId(), dto.getUserId());

				if (existing.isPresent()) {
					return new Response<>(HttpStatus.BAD_REQUEST.value(), "Budget for this category already exists",
							null);
				}

				CategoryBudget budget = new CategoryBudget();
				budget.setAmount(dto.getAmount());
				budget.setMonth(month);
				budget.setUserId(dto.getUserId());
				budget.setExpenseCategory(categoryOpt.get());
				budget.setIsExceeded(false);
				budgetRepository.save(budget);
				return new Response<>(HttpStatus.OK.value(), "Budget added successfully", null);
			} else {
				
				Optional<CategoryBudget> existing = budgetRepository.findById(dto.getId());
				if (existing.isEmpty()) {
					return new Response<>(HttpStatus.NOT_FOUND.value(), "Budget not found", null);
				}
				CategoryBudget budget = existing.get();
				budget.setAmount(dto.getAmount());
				budget.setIsExceeded(false);
				budgetRepository.save(budget);
				return new Response<>(HttpStatus.OK.value(), "Budget updated successfully", null);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Something went wrong", null);
		}
	}


}
