package com.watsoo.expense.serviceImpl;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.watsoo.expense.dto.DashboardDto;
import com.watsoo.expense.dto.ExpenseDto;
import com.watsoo.expense.dto.IncomeTransactionDto;
import com.watsoo.expense.dto.Response;
import com.watsoo.expense.feignClient.WalletFeignClient;
import com.watsoo.expense.service.DashboardService;
import com.watsoo.expense.service.ExpenseService;

@Service
public class DashboardServiceImpl implements DashboardService {

	@Autowired
	private ExpenseService expenseService;
	@Autowired
	private WalletFeignClient walletFeignClient;
//	@Override
////	public Response<?> getAllDashboardData(Long userId, Long walletId, String month) {
//		  try {
//			   dashboardDto dashboardDto = new DashboardDto();
//			   try {
//			    YearMonth.parse(month, DateTimeFormatter.ofPattern("yyyy-MM"));
//			   } catch (DateTimeParseException e) {
//			    return new Response<>(HttpStatus.BAD_REQUEST.value(), "Invalid month format. Use yyyy-MM", null);
//			   }
//			   Date[] monthRange = getMonthRange(month);
//			   SimpleDateFormat formtter = new SimpleDateFormat("yyyy-MM-dd");
//			   String fromDate = formtter.format(monthRange[0]);
//			   String toDate = formtter.format(monthRange[1]);
//			   List<IncomeTransactionDto> incomeTransactionDtos = new ArrayList<>();
//			   try {
//			    Response<List<IncomeTransactionDto>> expensesResponse = walletFeignClient
//			      .getAllIncomeTransactions(userId, null, fromDate, toDate);
//			    incomeTransactionDtos = expensesResponse.getData();
//			   } catch (Exception e) {
//			    return new Response<>(HttpStatus.BAD_REQUEST.value(),
//			      "user not found or Please provide both startDate and endDate", null);
//			   }
//
//			   Response<?> expenses = expenseService.getAllExpenses(userId, null, month);
//			   if (expenses.getResponseCode() != HttpStatus.OK.value()) {
//			    return new Response<>(HttpStatus.BAD_REQUEST.value(), "expenses not found.", null);
//			   }
//			   List<ExpenseDto> expenseDtos = (List<ExpenseDto>) expenses.getData();
//			   Double spent = 0.0;
//			   for (ExpenseDto dto : expenseDtos) {
//			    spent += dto.getAmount();
//			   }
//			   Double income= 0.0 ;
//			   for(IncomeTransactionDto dto :incomeTransactionDtos) {
//			    income += dto.getAmount();
//			   }
//			   dashboardDto.setExpenses(expenseDtos);
//			   dashboardDto.setIncomeTransactions(incomeTransactionDtos);
//			   dashboardDto.setTotalIncome(income);
//			   dashboardDto.setTotalSpent(spent);
//			   dashboardDto.setMonth(month);
//			   return new Response<>(HttpStatus.OK.value(), "fetched successfully", dashboardDto);
//			  } catch (Exception e) {
//			   e.printStackTrace();
//			   return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "something went wrong", null);
//			  }
//			     
//			 }

	@Override
	public Response<?> getDashboardSummary(Long userId, Long walletId, String month) {
		try {
			if (month == null || month.trim().isEmpty()) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Month required (yyyy-MM)", null);
			}

			try {
				YearMonth.parse(month, DateTimeFormatter.ofPattern("yyyy-MM"));
			} catch (DateTimeParseException e) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Invalid month format. Use yyyy-MM", null);
			}
			Date[] range = getMonthRange(month);
			Date startDate = range[0];
			Date endDate = range[1];
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

			Response<?> expensesResp = expenseService.getAllExpenses(userId, walletId, month);
			if (expensesResp.getResponseCode() != HttpStatus.OK.value()) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Could not fetch expenses", null);
			}
			List<ExpenseDto> expenses = (List<ExpenseDto>) expensesResp.getData();
			double totalSpent = expenses.stream().mapToDouble(ExpenseDto::getAmount).sum();
			Response<List<IncomeTransactionDto>> incomeResp;
			List<IncomeTransactionDto> incomes;
			  incomeResp = walletFeignClient.getAllIncomeTransactions(userId, walletId, formatter.format(startDate),
						formatter.format(endDate));
			
			if (incomeResp == null || incomeResp.getData() == null) {
				return new Response<>(HttpStatus.BAD_REQUEST.value(), "Failed to fetch income via wallet service", null);
			}
			incomes=incomeResp.getData();
			double totalIncome = incomes.stream().mapToDouble(IncomeTransactionDto::getAmount).sum();

			Map<String, Double> categorySummary = expenses.stream().collect(Collectors
					.groupingBy(e -> e.getCategoryDto().getName(), Collectors.summingDouble(ExpenseDto::getAmount)));

			// 4. Budget Exceeded
//			boolean isExceed = budgetRepository.existsByMonthAndUserIdAndIsExceededTrue(month, userId);

			DashboardDto dashboardDto = new DashboardDto();
			dashboardDto.setMonth(month);
			dashboardDto.setUserId(userId);
			dashboardDto.setWalletId(walletId);
			dashboardDto.setExpenses(expenses);
			dashboardDto.setIncomeTransactions(incomes);
			dashboardDto.setTotalIncome(totalIncome);
			dashboardDto.setTotalSpent(totalSpent);
//			dashboardDto.setIsExceed(isExceed);
			dashboardDto.setCategorySummary(categorySummary);

			return new Response<>(HttpStatus.OK.value(), "Dashboard summary fetched", dashboardDto);

		} catch (Exception e) {
			e.printStackTrace();
			return new Response<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Something went wrong", null);
		}
	}

	public Date[] getMonthRange(String monthString) {
		YearMonth yearMonth = YearMonth.parse(monthString, DateTimeFormatter.ofPattern("yyyy-MM"));
		LocalDate start = yearMonth.atDay(1);
		LocalDate end = yearMonth.atEndOfMonth();
		return new Date[] { java.sql.Date.valueOf(start), java.sql.Date.valueOf(end) };
	}

}
